using Microsoft.AspNetCore.Mvc;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace ShopBot.Controllers;

[ApiController]
[Route("api")]
public class ShopController : ControllerBase
{
    private readonly DatabaseService _db;

    public ShopController(DatabaseService db)
    {
        _db = db;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    [HttpGet("products")]
    public async Task<IActionResult> GetProducts()
    {
        try
        {
            var products = await _db.GetAllProducts();
            return Ok(new { success = true, data = products });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
    [HttpGet("products/{id}")]
    public async Task<IActionResult> GetProduct(int id)
    {
        try
        {
            var product = await _db.GetProductById(id);
            if (product == null)
                return NotFound(new { success = false, error = "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });

            return Ok(new { success = true, data = product });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å —Å–∫–∏–¥–∫–∞–º–∏
    [HttpGet("products/discounts")]
    public async Task<IActionResult> GetProductsWithDiscounts()
    {
        try
        {
            var products = await _db.GetProductsWithDiscounts();
            return Ok(new { success = true, data = products });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
    [HttpPost("products")]
    public async Task<IActionResult> AddProduct([FromBody] AddProductRequest request)
    {
        try
        {
            await _db.AddProduct(request.Name, request.Description, request.Price, request.Stock, request.CategoryId, request.ImageUrl);
            return Ok(new { success = true });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    // –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
    [HttpPost("orders")]
    public async Task<IActionResult> CreateOrder([FromBody] CreateOrderRequest request)
    {
        try
        {
            // –°–æ–∑–¥–∞—ë–º —é–∑–µ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            await _db.GetOrCreateUser(request.TelegramId, null, null, null);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            decimal totalPrice = 0;
            var orderItems = new List<OrderItem>();

            foreach (var item in request.Items)
            {
                var product = await _db.GetProductById(item.ProductId);
                if (product == null || !product.IsAvailable)
                return BadRequest(new { success = false, error = $"–¢–æ–≤–∞—Ä {item.ProductId} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" });

                if (product.Stock < item.Quantity)
                return BadRequest(new { success = false, error = $"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {product.Name} –Ω–∞ —Å–∫–ª–∞–¥–µ" });

                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π
                var productsWithDiscount = await _db.GetProductsWithDiscounts();
                var productWithDiscount = productsWithDiscount.FirstOrDefault(p => p.Id == item.ProductId);
    
                decimal actualPrice = productWithDiscount?.FinalPrice ?? product.Price;
    
                totalPrice += actualPrice * item.Quantity;
                orderItems.Add(new OrderItem
                {
                    ProductId = item.ProductId,
                    Quantity = item.Quantity,
                    Price = actualPrice  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
                });
            }

            // –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
            var orderId = await _db.CreateOrder(
                request.TelegramId,
                totalPrice,
                request.Phone,
                request.Address,
                request.Comment
            );

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
            await _db.AddOrderItems(orderId, orderItems);

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
            var order = await _db.GetOrderById(orderId);
            var items = await _db.GetOrderItems(orderId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            var bot = HttpContext.RequestServices.GetRequiredService<ITelegramBotClient>();
            await SendOrderNotification(bot, orderId, order!, items);
            await SendOrderConfirmationToUser(bot, request.TelegramId, orderId, order!);

            return Ok(new
            {
                success = true,
                data = new
                {
                    orderId = orderId,
                    order = order,
                    items = items
                }
            });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    [HttpGet("orders/{telegramId}")]
    public async Task<IActionResult> GetUserOrders(long telegramId)
    {
        try
        {
            var orders = await _db.GetUserOrders(telegramId);
            return Ok(new { success = true, data = orders });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    // === –ö–ê–¢–ï–ì–û–†–ò–ò ===

    [HttpGet("categories")]
    public async Task<IActionResult> GetCategories()
    {
        try
        {
            var categories = await _db.GetAllCategories();
            return Ok(new { success = true, data = categories });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    [HttpPost("categories")]
    public async Task<IActionResult> AddCategory([FromBody] AddCategoryRequest request)
    {
        try
        {
            var categoryId = await _db.AddCategory(request.Name, request.Description);
            return Ok(new { success = true, data = new { id = categoryId } });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    [HttpGet("categories/{id}/products")]
    public async Task<IActionResult> GetCategoryProducts(int id)
    {
        try
        {
            var products = await _db.GetProductsByCategory(id);
            return Ok(new { success = true, data = products });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { success = false, error = ex.Message });
        }
    }

    // === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===

    private async Task SendOrderNotification(ITelegramBotClient bot, int orderId, Order order, List<OrderItemDetail> items)
    {
        long ADMIN_CHAT_ID = 464350533; // –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô!
        
        string message = $"üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó #{orderId}\n\n";
        message += $"üí∞ –°—É–º–º–∞: {order.TotalPrice}‚ÇΩ\n";
        message += $"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.PhoneNumber}\n";
        message += $"üìç –ê–¥—Ä–µ—Å: {order.DeliveryAddress}\n";
        
        if (!string.IsNullOrEmpty(order.Comment))
            message += $"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.Comment}\n";
        
        message += "\nüì¶ –¢–æ–≤–∞—Ä—ã:\n";
        foreach (var item in items)
        {
            message += $"‚Ä¢ {item.ProductName} x{item.Quantity} = {item.Price * item.Quantity}‚ÇΩ\n";
        }
        
        message += "\nüí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –°–ë–ü:\n";
        message += "+7 (XXX) XXX-XX-XX"; // –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ù–û–ú–ï–†
        
        try
        {
            await bot.SendMessage(ADMIN_CHAT_ID, message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex.Message}");
        }
    }

    private async Task SendOrderConfirmationToUser(ITelegramBotClient bot, long userId, int orderId, Order order)
    {
        string message = $"‚úÖ –ó–∞–∫–∞–∑ #{orderId} –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n";
        message += $"üí∞ –°—É–º–º–∞: {order.TotalPrice}‚ÇΩ\n";
        message += $"üì¶ –°—Ç–∞—Ç—É—Å: ‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n";
        message += $"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –°–ë–ü:\n";
        message += $"+7 (XXX) XXX-XX-XX\n\n"; // –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ù–û–ú–ï–†
        message += $"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º.";
        
        try
        {
            await bot.SendMessage(userId, message);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —é–∑–µ—Ä—É: {ex.Message}");
        }
    }
}

// === –ú–û–î–ï–õ–ò –ó–ê–ü–†–û–°–û–í ===

public class CreateOrderRequest
{
    public long TelegramId { get; set; }
    public string? Phone { get; set; }
    public string? Address { get; set; }
    public string? Comment { get; set; }
    public List<OrderItemRequest> Items { get; set; } = new();
}

public class OrderItemRequest
{
    public int ProductId { get; set; }
    public int Quantity { get; set; }
}

public class AddCategoryRequest
{
    public string Name { get; set; } = "";
    public string? Description { get; set; }
}

public class AddProductRequest
{
    public string Name { get; set; } = "";
    public string? Description { get; set; }
    public decimal Price { get; set; }
    public int Stock { get; set; }
    public int? CategoryId { get; set; }
    public string? ImageUrl { get; set; }
}