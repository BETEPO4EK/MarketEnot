<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ú–∞–≥–∞–∑–∏–Ω</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
            color: #ffffff;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .gradient-bg {
            background: linear-gradient(135deg, #ff6b35 0%, #ff8c42 100%);
        }

        .glass {
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .cart-badge {
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #ff6b35 0%, #ff8c42 100%);
            color: white;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            cursor: pointer;
            z-index: 1000;
            box-shadow: 0 8px 32px rgba(255, 107, 53, 0.4);
            transition: all 0.3s ease;
            animation: pulse 2s infinite;
        }

        .cart-badge:hover {
            transform: scale(1.1);
            box-shadow: 0 12px 48px rgba(255, 107, 53, 0.6);
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .product-card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            cursor: pointer;
            animation: slideInUp 0.5s ease-out;
            position: relative;
            overflow: hidden;
        }

        .product-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(255, 107, 53, 0.3);
        }

        .product-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 107, 53, 0.2), transparent);
            transition: left 0.5s;
        }

        .product-card:hover::before {
            left: 100%;
        }

        .product-card:active {
            transform: scale(0.98);
        }

        .btn-primary {
            background: linear-gradient(135deg, #ff6b35 0%, #ff8c42 100%);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.3);
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .btn-primary:active::before {
            width: 300px;
            height: 300px;
        }

        .btn-primary:hover {
            box-shadow: 0 8px 32px rgba(255, 107, 53, 0.5);
            transform: translateY(-2px);
        }

        .order-banner {
            animation: slideInUp 0.5s ease-out;
            background: linear-gradient(135deg, rgba(255, 107, 53, 0.1) 0%, rgba(255, 140, 66, 0.1) 100%);
            backdrop-filter: blur(10px);
            border-left: 4px solid #ff6b35;
        }

        input, textarea {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            color: white;
            transition: all 0.3s ease;
        }

        input:focus, textarea:focus {
            outline: none;
            border-color: #ff6b35;
            box-shadow: 0 0 20px rgba(255, 107, 53, 0.3);
            background: rgba(255, 255, 255, 0.08);
        }

        input::placeholder, textarea::placeholder {
            color: rgba(255, 255, 255, 0.4);
        }

        .screen-enter {
            animation: fadeIn 0.3s ease-out;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #ff6b35;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .shine {
            position: relative;
            overflow: hidden;
        }

        .shine::after {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                45deg,
                transparent 30%,
                rgba(255, 255, 255, 0.1) 50%,
                transparent 70%
            );
            animation: shine 3s infinite;
        }

        @keyframes shine {
            0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
            100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
        }

        .qty-btn {
            background: rgba(255, 107, 53, 0.2);
            transition: all 0.2s ease;
        }

        .qty-btn:hover {
            background: rgba(255, 107, 53, 0.4);
            transform: scale(1.1);
        }

        .qty-btn:active {
            transform: scale(0.95);
        }
    </style>
</head>
<body class="p-4 pb-20">
    <!-- –ö–æ—Ä–∑–∏–Ω–∞ –±–µ–π–¥–∂ -->
    <div id="cartBadge" class="cart-badge" onclick="showCart()" style="display: none;">
        <span id="cartCount" class="text-xl">0</span>
    </div>

    <!-- –ü–ª–∞—à–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ -->
    <div id="activeOrderBanner" style="display: none;" class="order-banner mb-6 p-4 rounded-xl">
        <div class="flex justify-between items-start">
            <div class="flex-1">
                <h3 class="font-bold text-lg">üì¶ –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ #<span id="orderNumber"></span></h3>
                <p class="text-sm text-gray-300 mt-2">–°—Ç–∞—Ç—É—Å: <span id="orderStatus" class="font-medium text-orange-400"></span></p>
                <p class="text-sm text-gray-300 mt-1">–°—É–º–º–∞: <span id="orderTotal" class="font-bold text-orange-400"></span>‚ÇΩ</p>
            </div>
            <button onclick="closeOrderBanner()" class="text-white text-2xl hover:text-orange-400 transition-colors">√ó</button>
        </div>
    </div>

    <!-- –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω - —Ç–æ–≤–∞—Ä—ã -->
    <div id="productsScreen" class="screen-enter">
        <div class="mb-6">
            <h1 class="text-3xl font-bold mb-2 bg-gradient-to-r from-orange-400 to-orange-600 bg-clip-text text-transparent">
                üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω
            </h1>
            <p class="text-gray-400">–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤—å –≤ –∫–æ—Ä–∑–∏–Ω—É</p>
        </div>
        <div id="productsList" class="grid grid-cols-2 gap-4">
            <div class="col-span-2 text-center py-8">
                <div class="loading mx-auto mb-3"></div>
                <p class="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</p>
            </div>
        </div>
    </div>

    <!-- –≠–∫—Ä–∞–Ω –∫–æ—Ä–∑–∏–Ω—ã -->
    <div id="cartScreen" style="display: none;" class="screen-enter">
        <div class="flex items-center justify-between mb-6">
            <h1 class="text-3xl font-bold bg-gradient-to-r from-orange-400 to-orange-600 bg-clip-text text-transparent">
                üõí –ö–æ—Ä–∑–∏–Ω–∞
            </h1>
            <button onclick="showProducts()" class="text-orange-400 hover:text-orange-300 transition-colors font-medium">
                ‚Üê –ù–∞–∑–∞–¥
            </button>
        </div>
        <div id="cartItems" class="space-y-4 mb-6"></div>
        <div class="glass rounded-xl p-6 border border-white/10">
            <div class="flex justify-between text-2xl font-bold mb-6">
                <span>–ò—Ç–æ–≥–æ:</span>
                <span id="totalPrice" class="text-orange-400">0‚ÇΩ</span>
            </div>
            <button onclick="showCheckout()" class="btn-primary w-full text-white py-4 rounded-xl font-bold text-lg shadow-lg">
                –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üöÄ
            </button>
        </div>
    </div>

    <!-- –≠–∫—Ä–∞–Ω –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è -->
    <div id="checkoutScreen" style="display: none;" class="screen-enter">
        <div class="flex items-center justify-between mb-6">
            <h1 class="text-3xl font-bold bg-gradient-to-r from-orange-400 to-orange-600 bg-clip-text text-transparent">
                üìù –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
            </h1>
            <button onclick="showCart()" class="text-orange-400 hover:text-orange-300 transition-colors font-medium">
                ‚Üê –ù–∞–∑–∞–¥
            </button>
        </div>
        <form id="checkoutForm" class="space-y-5">
            <div>
                <label class="block mb-2 font-medium text-gray-300">üìû –¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input type="tel" id="phone" required class="w-full rounded-xl p-4 text-lg" placeholder="+7 (999) 123-45-67">
            </div>
            <div>
                <label class="block mb-2 font-medium text-gray-300">üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                <textarea id="address" required class="w-full rounded-xl p-4" rows="3" placeholder="–£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"></textarea>
            </div>
            <div>
                <label class="block mb-2 font-medium text-gray-300">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
                <textarea id="comment" class="w-full rounded-xl p-4" rows="2" placeholder="–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"></textarea>
            </div>
            <button type="submit" class="btn-primary w-full text-white py-4 rounded-xl font-bold text-lg shadow-lg shine">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ üéâ
            </button>
        </form>
    </div>

    <script>
        const API_URL = 'https://88aa94f4bf72.ngrok-free.app/api';
        let tg = window.Telegram.WebApp;
        let cart = [];
        let products = [];
        let activeOrder = null;

        tg.ready();
        tg.expand();

        async function loadProducts() {
            try {
                const response = await fetch(`${API_URL}/products`, {
                    headers: {
                        'ngrok-skip-browser-warning': 'true',
                        'User-Agent': 'TelegramBot'
                    }
                });
                const data = await response.json();
                products = data.data;
                renderProducts();
                await loadActiveOrder();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
                document.getElementById('productsList').innerHTML = '<p class="col-span-2 text-center text-red-400">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤</p>';
            }
        }

        async function loadActiveOrder() {
            try {
                const userId = tg.initDataUnsafe.user?.id || 464350533;
                const response = await fetch(`${API_URL}/orders/${userId}`, {
                    headers: {
                        'ngrok-skip-browser-warning': 'true',
                        'User-Agent': 'TelegramBot'
                    }
                });
                const data = await response.json();
                
                if (data.success && data.data.length > 0) {
                    activeOrder = data.data.find(o => o.status !== 'completed' && o.status !== 'cancelled');
                    if (activeOrder) {
                        showActiveOrderBanner(activeOrder);
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
            }
        }

        function showActiveOrderBanner(order) {
            const banner = document.getElementById('activeOrderBanner');
            document.getElementById('orderNumber').textContent = order.id;
            document.getElementById('orderStatus').textContent = getStatusText(order.status);
            document.getElementById('orderTotal').textContent = order.totalPrice;
            banner.style.display = 'block';
        }

        function closeOrderBanner() {
            document.getElementById('activeOrderBanner').style.display = 'none';
        }

        function getStatusText(status) {
            const statuses = {
                'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
                'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω',
                'confirmed': 'üì¶ –ì–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ',
                'shipped': 'üöö –ü–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
                'completed': '‚úÖ –ü–æ–ª—É—á–µ–Ω',
                'cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
            };
            return statuses[status] || status;
        }

        function renderProducts() {
            const container = document.getElementById('productsList');
            if (products.length === 0) {
                container.innerHTML = '<p class="col-span-2 text-center text-gray-400 py-8">–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>';
                return;
            }
            container.innerHTML = products.map((product, index) => `
                <div class="product-card glass rounded-xl p-4 cursor-pointer" onclick="addToCart(${product.id})" style="animation-delay: ${index * 0.1}s">
                    ${product.imageUrl ? `<img src="${product.imageUrl}" class="w-full h-40 object-cover rounded-lg mb-3">` : '<div class="w-full h-40 bg-gradient-to-br from-orange-500/20 to-orange-600/20 rounded-lg mb-3 flex items-center justify-center text-5xl">üì¶</div>'}
                    <h3 class="font-bold text-lg mb-1">${product.name}</h3>
                    <p class="text-sm text-gray-400 mb-3 line-clamp-2">${product.description || ''}</p>
                    <div class="flex justify-between items-center">
                        <span class="text-xl font-bold text-orange-400">${product.price}‚ÇΩ</span>
                        <span class="text-xs text-gray-500 bg-white/5 px-2 py-1 rounded-full">–û—Å—Ç–∞–ª–æ—Å—å: ${product.stock}</span>
                    </div>
                </div>
            `).join('');
        }

        function addToCart(productId) {
            const product = products.find(p => p.id === productId);
            const cartItem = cart.find(item => item.productId === productId);

            if (cartItem) {
                if (cartItem.quantity < product.stock) {
                    cartItem.quantity++;
                }
            } else {
                cart.push({ productId, quantity: 1, product });
            }

            updateCartBadge();
            tg.HapticFeedback.impactOccurred('light');
        }

        function updateCartBadge() {
            const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
            document.getElementById('cartCount').textContent = totalItems;
            document.getElementById('cartBadge').style.display = totalItems > 0 ? 'flex' : 'none';
        }

        function showCart() {
            if (cart.length === 0) {
                tg.showAlert('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
                return;
            }

            document.getElementById('productsScreen').style.display = 'none';
            document.getElementById('cartScreen').style.display = 'block';
            renderCart();
        }

        function renderCart() {
            const container = document.getElementById('cartItems');
            let total = 0;

            container.innerHTML = cart.map(item => {
                const subtotal = item.product.price * item.quantity;
                total += subtotal;
                return `
                    <div class="glass rounded-xl p-4 flex items-center justify-between">
                        <div class="flex-1">
                            <h3 class="font-bold text-lg">${item.product.name}</h3>
                            <p class="text-sm text-gray-400 mt-1">${item.product.price}‚ÇΩ √ó ${item.quantity} = ${subtotal}‚ÇΩ</p>
                        </div>
                        <div class="flex items-center gap-3">
                            <button onclick="changeQuantity(${item.productId}, -1)" class="qty-btn w-10 h-10 rounded-lg font-bold text-white">‚àí</button>
                            <span class="font-bold text-xl text-orange-400 w-8 text-center">${item.quantity}</span>
                            <button onclick="changeQuantity(${item.productId}, 1)" class="qty-btn w-10 h-10 rounded-lg font-bold text-white">+</button>
                            <button onclick="removeFromCart(${item.productId})" class="text-red-400 ml-2 text-2xl hover:scale-110 transition-transform">üóëÔ∏è</button>
                        </div>
                    </div>
                `;
            }).join('');

            document.getElementById('totalPrice').textContent = `${total}‚ÇΩ`;
        }

        function changeQuantity(productId, delta) {
            const cartItem = cart.find(item => item.productId === productId);
            const product = products.find(p => p.id === productId);

            if (cartItem) {
                cartItem.quantity += delta;
                if (cartItem.quantity <= 0) {
                    removeFromCart(productId);
                } else if (cartItem.quantity > product.stock) {
                    cartItem.quantity = product.stock;
                    tg.showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ');
                }
                renderCart();
                updateCartBadge();
            }
        }

        function removeFromCart(productId) {
            cart = cart.filter(item => item.productId !== productId);
            if (cart.length === 0) {
                showProducts();
            } else {
                renderCart();
            }
            updateCartBadge();
        }

        function showProducts() {
            document.getElementById('productsScreen').style.display = 'block';
            document.getElementById('cartScreen').style.display = 'none';
            document.getElementById('checkoutScreen').style.display = 'none';
        }

        function showCheckout() {
            document.getElementById('cartScreen').style.display = 'none';
            document.getElementById('checkoutScreen').style.display = 'block';
        }

        document.getElementById('checkoutForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const phone = document.getElementById('phone').value;
            const address = document.getElementById('address').value;
            const comment = document.getElementById('comment').value;

            const orderData = {
                telegramId: tg.initDataUnsafe.user?.id || 464350533,
                phone,
                address,
                comment,
                items: cart.map(item => ({
                    productId: item.productId,
                    quantity: item.quantity
                }))
            };

            try {
                const response = await fetch(`${API_URL}/orders`, {
                    method: 'POST',
                    headers: { 
                        'Content-Type': 'application/json',
                        'ngrok-skip-browser-warning': 'true',
                        'User-Agent': 'TelegramBot'
                    },
                    body: JSON.stringify(orderData)
                });

                const result = await response.json();

                if (result.success) {
                    tg.showAlert('‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –í–∞–º –ø—Ä–∏–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã.');
                    cart = [];
                    updateCartBadge();
                    
                    activeOrder = result.data.order;
                    showActiveOrderBanner(activeOrder);
                    
                    setTimeout(() => {
                        showProducts();
                    }, 1500);
                } else {
                    tg.showAlert('‚ùå –û—à–∏–±–∫–∞: ' + result.error);
                }
            } catch (error) {
                tg.showAlert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞');
                console.error(error);
            }
        });

        loadProducts();
    </script>
</body>
</html>